<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学习笔记</title>
  
  <subtitle>郑诗增的学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-17T09:17:46.273Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>郑诗增</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VS2010_编译Boost_1_64</title>
    <link href="http://yoursite.com/2018/12/05/VS2010_%E7%BC%96%E8%AF%91Boost-1-64/"/>
    <id>http://yoursite.com/2018/12/05/VS2010_编译Boost-1-64/</id>
    <published>2018-12-05T01:40:16.000Z</published>
    <updated>2019-06-17T09:17:46.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Boost库是一个可移植、提供源代码的C++库，作为标准库的后备，是C++标准化进程的开发引擎之一.<br><a id="more"></a></p></blockquote><h5 id="1-下载BOOST-官网www-boost-org上下载任何版本的都可以。"><a href="#1-下载BOOST-官网www-boost-org上下载任何版本的都可以。" class="headerlink" title="1. 下载BOOST 官网www.boost.org上下载任何版本的都可以。"></a>1. 下载BOOST 官网<a href="http://www.boost.org上下载任何版本的都可以。" target="_blank" rel="noopener">www.boost.org上下载任何版本的都可以。</a></h5><p>这里下载的是boost_1_64_0 版本，解压到某个目录，我解压到了D盘根目录：D:\boost_1_64_0</p><h5 id="2-生成bjam-exe可执行文件，打开2010控制台：开始-所有程序—Microsoft-visual-studio2010——Visual-Studio-Tools——Visual-Studio-2010命令提示"><a href="#2-生成bjam-exe可执行文件，打开2010控制台：开始-所有程序—Microsoft-visual-studio2010——Visual-Studio-Tools——Visual-Studio-2010命令提示" class="headerlink" title="2. 生成bjam.exe可执行文件，打开2010控制台：开始-所有程序—Microsoft visual studio2010——Visual Studio Tools——Visual Studio 2010命令提示"></a>2. 生成bjam.exe可执行文件，打开2010控制台：开始-所有程序—Microsoft visual studio2010——Visual Studio Tools——Visual Studio 2010命令提示</h5><p>进入到到目录D:\boost_1_64_0，运行bootstrap.bat </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:<span class="string">\Program</span> Files (x86)<span class="string">\Microsoft</span> Visual Studio <span class="number">10.0</span><span class="string">\VC&gt;cd</span> D:<span class="string">\boost_1_64_0</span></span><br><span class="line">D:<span class="string">\boost_1_64_0&gt;bootstrap.bat</span></span><br></pre></td></tr></table></figure><p>这时在目录D:\boost_1_64_0生成了b2.exe、bjam.exe、project-config.jam文件</p><h5 id="3-用bjam-exe编译"><a href="#3-用bjam-exe编译" class="headerlink" title="3. 用bjam.exe编译"></a>3. 用bjam.exe编译</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D:\boost_1_64_0&gt;bjam <span class="attribute">--toolset</span>=msvc-10.0 <span class="attribute">--build-type</span>=complete --without-python</span><br><span class="line"><span class="attribute">--prefix</span>=<span class="string">"D:\boost_1_64_0\bin\vc10"</span> <span class="attribute">link</span>=static <span class="attribute">runtime-link</span>=shared <span class="attribute">threading</span>=mu</span><br><span class="line">lti <span class="builtin-name">debug</span> release install</span><br><span class="line"></span><br><span class="line">bjam stage --without-python <span class="attribute">--toolset</span>=msvc-14.0 <span class="attribute">--build-type</span>=complete <span class="attribute">--stagedir</span>=<span class="string">"D:\boost_1_64_0\bin\vc10"</span>  <span class="attribute">link</span>=static <span class="attribute">runtime-link</span>=shared <span class="attribute">threading</span>=multi <span class="builtin-name">debug</span> release</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\boost_1_64_0&gt;bjam stage <span class="attribute">--toolset</span>=msvc-14.0 <span class="attribute">--build-type</span>=complete --stagedir=</span><br><span class="line"><span class="string">"D:\boost_1_64_0\bin\vc14"</span>  <span class="attribute">link</span>=static <span class="attribute">runtime-link</span>=static <span class="attribute">threading</span>=multi debu</span><br><span class="line">g release</span><br><span class="line"></span><br><span class="line">bjam <span class="attribute">--toolset</span>=msvc-14.1 <span class="attribute">--build-type</span>=complete --without-python <span class="attribute">--prefix</span>=<span class="string">"D:\boost_1_64_0\bin\vc141"</span> <span class="attribute">link</span>=static <span class="attribute">runtime-link</span>=shared <span class="attribute">threading</span>=multi <span class="builtin-name">debug</span> release install</span><br></pre></td></tr></table></figure><p>install 表示会生成包含头文件的include目录,stage表示只生成库（dll和lib）<br>without/with表示不编译/编译哪些库<br>toolset指定编译器，VS2010用msvc-10.0<br>prefix,表示编译生成文件的路径。使用install用prefix,使用stage时用stagedir<br>link指定生成动态链接库或静态链接库。生成动态链接库需使用shared方式，生成静态链接库需使用static方式。<br>runtime-link，动态/静态链接C/C++运行时库。有shared和static两种方式，这样runtime-link和link一共可以产生4种组合方式。<br>threading，单/多线程编译。<br>debug/release，编译debug/release版本。一般都是程序的debug版本对应库的debug版本，所以两个都编译。   </p><p>差不多需要一小时，编译完成（中间会有警告）<br>编译好后，在根目录会有个bin.v2文件夹，是编译过程中的临时文件夹，很大，可以手动删除。   </p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Boost库是一个可移植、提供源代码的C++库，作为标准库的后备，是C++标准化进程的开发引擎之一.&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="make" scheme="http://yoursite.com/categories/make/"/>
    
    
      <category term="VisualStudio" scheme="http://yoursite.com/tags/VisualStudio/"/>
    
  </entry>
  
  <entry>
    <title>安装VS2017的正确姿势</title>
    <link href="http://yoursite.com/2018/12/05/%E5%AE%89%E8%A3%85VS2017%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://yoursite.com/2018/12/05/安装VS2017的正确姿势/</id>
    <published>2018-12-04T22:27:41.000Z</published>
    <updated>2019-05-14T08:05:18.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>VS2017 默认安装在C盘,太占空间了,下载离线安装包到其它盘<br><a id="more"></a></p></blockquote><h3 id="第一步：创建-offline-文件存放的位置"><a href="#第一步：创建-offline-文件存放的位置" class="headerlink" title="第一步：创建 offline 文件存放的位置"></a>第一步：创建 offline 文件存放的位置</h3><p>找一个空闲空间比较大的盘，大概需要 30G 左右的空间（完全下载，包括了几个模拟器）.</p><h3 id="第二步：创建下载脚本"><a href="#第二步：创建下载脚本" class="headerlink" title="第二步：创建下载脚本"></a>第二步：创建下载脚本</h3><p>下载 VS2017 的在线安装程序。放到刚才创建好的文件夹里。然后创建一个 cmd 文件：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs_community<span class="selector-class">.exe</span> --layout D:\vs2017\offline</span><br></pre></td></tr></table></figure></p><p>这个简单的脚本会下载所有的安装包。如果你不想下载所有的，可以自己选择要下载的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vs_community<span class="selector-class">.exe</span> --layout D:\vs2017\offline --add Microsoft<span class="selector-class">.VisualStudio</span><span class="selector-class">.Workload</span><span class="selector-class">.Azure</span> Microsoft<span class="selector-class">.VisualStudio</span><span class="selector-class">.Workload</span><span class="selector-class">.ManagedDesktop</span> Component<span class="selector-class">.GitHub</span><span class="selector-class">.VisualStudio</span></span><br></pre></td></tr></table></figure><p>如果需要下载单一语言的后面加上<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--lang zh-CN</span></span><br></pre></td></tr></table></figure></p><h3 id="第三步：运行脚本，然后等待"><a href="#第三步：运行脚本，然后等待" class="headerlink" title="第三步：运行脚本，然后等待"></a>第三步：运行脚本，然后等待</h3><h3 id="第四步：安装证书"><a href="#第四步：安装证书" class="headerlink" title="第四步：安装证书"></a>第四步：安装证书</h3><p>下载完成之后，别急着安装。我想这个离线包可能是用了什么本地的 Web Server，而又需要 https，所以你得先把几个证书装上，位置在 vs2017\offline\certificates。不要偷懒，要都装。双击就可以安装。如果双击不行，就右键选择安装。</p><h3 id="第五步：安装"><a href="#第五步：安装" class="headerlink" title="第五步：安装"></a>第五步：安装</h3><p>下面才开始正式的安装。要注意的是，不要运行你下载的那个 installer，要运行 vs2017\offline\vs_community.exe 这个 installer。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;VS2017 默认安装在C盘,太占空间了,下载离线安装包到其它盘&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="install" scheme="http://yoursite.com/categories/install/"/>
    
    
      <category term="VisualStudio" scheme="http://yoursite.com/tags/VisualStudio/"/>
    
      <category term="install" scheme="http://yoursite.com/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>error C2275“XXXX” 将此类型用作表达式非法</title>
    <link href="http://yoursite.com/2018/12/03/error_C2275%E5%B0%86%E6%AD%A4%E7%B1%BB%E5%9E%8B%E7%94%A8%E4%BD%9C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9D%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/03/error_C2275将此类型用作表达式非法/</id>
    <published>2018-12-03T07:24:30.000Z</published>
    <updated>2019-06-18T07:14:28.673Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将C代码在VC++中编译，经常会出现error C2275错误.<br><a id="more"></a><br>原因:变量的定义位置不对，应该在函数块的最前面。这是一个编程习惯的问题。   </p></blockquote><p>在移植c++代码到c的时候，经常会出现一个奇怪的错误：“error C2275: “xxxxx”: 将此类型用作表达式非法”</p><p>c的编译器要求将变量的声明放在一个函数块的头部，而c++没有这样的要求造成的；解决的办法就是把变量的声明全部放在变量的生存块的开始。</p><blockquote><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>将变量的声明放在一个函数块的头部.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;将C代码在VC++中编译，经常会出现error C2275错误.&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="error" scheme="http://yoursite.com/categories/error/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>解决Navicat连接MySQL总是报错1251的方法</title>
    <link href="http://yoursite.com/2018/12/03/error_%E8%A7%A3%E5%86%B3Navicat%E8%BF%9E%E6%8E%A5MySQL%E6%80%BB%E6%98%AF%E6%8A%A5%E9%94%991251%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/03/error_解决Navicat连接MySQL总是报错1251的方法/</id>
    <published>2018-12-03T07:20:02.000Z</published>
    <updated>2019-06-18T03:43:27.550Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Navicat连接不上，总是报错1251;<br>原因是MySQL8.0版本的加密方式和MySQL5.0的不一样，连接会报错.<br><a id="more"></a><br>1.先通过命令行进入mysql的root账户：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -uroot -pz123456</span><br></pre></td></tr></table></figure></p></blockquote><p>2.更改加密方式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'z123456'</span> <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span> <span class="keyword">NEVER</span>;</span><br></pre></td></tr></table></figure></p><p>3.更改密码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'z123456'</span>;</span><br></pre></td></tr></table></figure></p><p>4.刷新：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Navicat连接不上，总是报错1251;&lt;br&gt;原因是MySQL8.0版本的加密方式和MySQL5.0的不一样，连接会报错.&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="error" scheme="http://yoursite.com/categories/error/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Navicat" scheme="http://yoursite.com/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>Win命令行下关闭某端口被占用程序</title>
    <link href="http://yoursite.com/2018/12/03/Win%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E5%85%B3%E9%97%AD%E6%9F%90%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/12/03/Win命令行下关闭某端口被占用程序/</id>
    <published>2018-12-03T07:15:37.000Z</published>
    <updated>2019-05-14T08:05:18.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具。<br><a id="more"></a></p></blockquote><h6 id="1-根据端口查询程序PID"><a href="#1-根据端口查询程序PID" class="headerlink" title="1.根据端口查询程序PID"></a>1.根据端口查询程序PID</h6><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano <span class="string">| findstr "</span><span class="number">7001</span><span class="string">"</span></span><br></pre></td></tr></table></figure><p>命令行下 输入 netstat /? 可查看帮忙.<br>参数 | 功能<br>—|—–<br> -a | 显示所有连接和侦听端口<br> -n | 以数字形式显示地址和端口号。</p><h2 id="o-显示拥有的与每个连接关联的进程-ID。"><a href="#o-显示拥有的与每个连接关联的进程-ID。" class="headerlink" title=" -o | 显示拥有的与每个连接关联的进程 ID。"></a> -o | 显示拥有的与每个连接关联的进程 ID。</h2><blockquote><p>tasklist用来显示运行在本地或远程计算机上的所有进程</p></blockquote><h6 id="2-根据PID查看是哪个进程或者程序占用了-如pid-5288"><a href="#2-根据PID查看是哪个进程或者程序占用了-如pid-5288" class="headerlink" title="2.根据PID查看是哪个进程或者程序占用了,如pid =5288"></a>2.根据PID查看是哪个进程或者程序占用了,如pid =5288</h6><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist <span class="string">| findstr "</span><span class="number">5288</span><span class="string">"</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>taskkill是用来终止进程的.</p></blockquote><h6 id="3-杀死进程-根据上一指令查询出来的，如-node-exe"><a href="#3-杀死进程-根据上一指令查询出来的，如-node-exe" class="headerlink" title="3.杀死进程,根据上一指令查询出来的，如 node.exe"></a>3.杀死进程,根据上一指令查询出来的，如 node.exe</h6><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /t /im <span class="keyword">node</span>.<span class="title">exe</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="cmd" scheme="http://yoursite.com/categories/cmd/"/>
    
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>VS2010_问题_LINK fatal error LNK1123 转换到 COFF 期间失败 文件无效或损坏</title>
    <link href="http://yoursite.com/2018/12/03/VS2010_%E9%97%AE%E9%A2%98_LINK%E6%96%87%E4%BB%B6%E6%97%A0%E6%95%88%E6%88%96%E6%8D%9F%E5%9D%8F/"/>
    <id>http://yoursite.com/2018/12/03/VS2010_问题_LINK文件无效或损坏/</id>
    <published>2018-12-02T22:26:39.000Z</published>
    <updated>2019-06-17T09:17:55.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>LINK : fatal error LNK1123: 转换到 COFF 期间失败: 文件无效或损坏<br><a id="more"></a><br>问题说明：当安装VS2012之后，原来的.NET 4.0会被替换为.NET 4.5。卸载VS2012时，不会恢复.NET 4.0。<br>l 当VS2012安装后，VS2010的cvtres.exe就无法使用了。如果你的PATH环境变量中VS2010的工具路径第一个出现，而且链接器需要将.res文件转换为COFF 对象格式，就会导致LNK1123错误。<br>l 当VS生成PE文件头时，使用的cvtres.exe版本错误，不能与当前的.NET平台兼容。</p></blockquote><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><h2 id="因为是cvtres-exe版本错误导致的结果，所以凡是能使VS链接器找到正确的cvtres-exe版本的方法都可以解决该问题。或者使VS链接器不生成COFF的方法都可以。"><a href="#因为是cvtres-exe版本错误导致的结果，所以凡是能使VS链接器找到正确的cvtres-exe版本的方法都可以解决该问题。或者使VS链接器不生成COFF的方法都可以。" class="headerlink" title="因为是cvtres.exe版本错误导致的结果，所以凡是能使VS链接器找到正确的cvtres.exe版本的方法都可以解决该问题。或者使VS链接器不生成COFF的方法都可以。"></a>因为是cvtres.exe版本错误导致的结果，所以凡是能使VS链接器找到正确的cvtres.exe版本的方法都可以解决该问题。或者使VS链接器不生成COFF的方法都可以。</h2><h5 id="【方法一】"><a href="#【方法一】" class="headerlink" title="【方法一】"></a>【方法一】</h5><p>  当前系统中存在两个cvtres.exe文件，版本不同。让VS2010使用.NET 4.5的cvtres.exe程序。<br>具体步骤：<br>重命名或删除：（vs2010安装的位置）C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\cvtres.exe<br>这样C:\Windows\Microsoft.NET\Framework\v4.0.30319 (.NET 4.5)中的cvtres.exe文件就可以被VS2010使用。</p><h5 id="【方法二】"><a href="#【方法二】" class="headerlink" title="【方法二】"></a>【方法二】</h5><p>解决方法如下：<br>项目\属性\配置属性\清单工具\输入和输出\嵌入清单：原来是“是”，改成“否”。<br>说明：这种方法每个工程均需要修改配置。</p><h5 id="【方法三】"><a href="#【方法三】" class="headerlink" title="【方法三】"></a>【方法三】</h5><p>安装：VS2010 SP1. 该版本应该是能使用.NET 4.5的，并配有正确的cvtres.exe版本。<br>注意：安装VS 2010 SP1 时会移除64-bit 编译器. 通过安装 VS 2010 SP1 compiler pack 能够重新获得。</p><h5 id="【方法四】"><a href="#【方法四】" class="headerlink" title="【方法四】"></a>【方法四】</h5><p>卸载.NET 4.5，重装.NET 4.0</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;LINK : fatal error LNK1123: 转换到 COFF 期间失败: 文件无效或损坏&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="error" scheme="http://yoursite.com/categories/error/"/>
    
    
      <category term="VisualStudio" scheme="http://yoursite.com/tags/VisualStudio/"/>
    
  </entry>
  
  <entry>
    <title>错误D8016“ZI”和“Gy-”命令行选项不兼容</title>
    <link href="http://yoursite.com/2018/12/03/error_%E9%94%99%E8%AF%AFD8016%E2%80%9CZI%E2%80%9D%E5%92%8C%E2%80%9CGy-%E2%80%9D%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%80%89%E9%A1%B9%E4%B8%8D%E5%85%BC%E5%AE%B9/"/>
    <id>http://yoursite.com/2018/12/03/error_错误D8016“ZI”和“Gy-”命令行选项不兼容/</id>
    <published>2018-12-02T22:26:36.000Z</published>
    <updated>2019-06-18T03:43:39.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>错误D8016“ZI”和“Gy-”命令行选项不兼容<br><a id="more"></a></p></blockquote><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ol><li>“项目”—&gt;“属性”—&gt;“C/C++” “常规”—&gt;“调试信息格式”—&gt;选择“程序数据库(/Zi)”或“无”   </li><li>“项目”—&gt;“属性”—&gt;“C/C++” “代码生成”—&gt;“启用函数集链接”—&gt;选择“是 (/Gy)”   </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;错误D8016“ZI”和“Gy-”命令行选项不兼容&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="error" scheme="http://yoursite.com/categories/error/"/>
    
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>ESM6802命令行记录</title>
    <link href="http://yoursite.com/2018/11/30/ESM6802%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/11/30/ESM6802命令行记录/</id>
    <published>2018-11-29T22:26:33.000Z</published>
    <updated>2019-05-14T08:05:18.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ESM6802 开发板子 命令行记录<br><a id="more"></a></p></blockquote><h5 id="查看文件编译格式"><a href="#查看文件编译格式" class="headerlink" title="查看文件编译格式"></a>查看文件编译格式</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -<span class="selector-tag">a</span> ffmpeg</span><br></pre></td></tr></table></figure><h5 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a <span class="regexp">/mnt/</span>nfs<span class="regexp">/tmp2/</span>bin<span class="regexp">/ffserver.conf /</span>opt<span class="regexp">/tmp2/</span>ffserver.conf</span><br></pre></td></tr></table></figure><h5 id="编译arm板子环境"><a href="#编译arm板子环境" class="headerlink" title="编译arm板子环境"></a>编译arm板子环境</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/sdk</span><br><span class="line"><span class="built_in">source</span> environment-setup-cortexa9hf-neon-emtronix-linux-gnueabi </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$CC</span></span><br></pre></td></tr></table></figure><h5 id="后台运行-nohup-command-amp"><a href="#后台运行-nohup-command-amp" class="headerlink" title="后台运行 nohup command &amp;"></a>后台运行 nohup command &amp;</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./ffserver -f ffserver<span class="selector-class">.conf</span> &amp;</span><br></pre></td></tr></table></figure><h5 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h5><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep ffmpeg     <span class="comment">//查找进程 ffmpeg</span></span><br><span class="line">kill <span class="number">-09</span> <span class="number">8925</span>           <span class="comment">//PID 上一命令第二列</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ESM6802 开发板子 命令行记录&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的tar压缩解压缩命令详解</title>
    <link href="http://yoursite.com/2018/11/30/Linux%E4%B8%8B%E7%9A%84tar%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/11/30/Linux下的tar压缩解压缩命令详解/</id>
    <published>2018-11-29T22:22:21.000Z</published>
    <updated>2019-05-14T08:05:18.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Linux下的tar压缩解压缩命令详解</p></blockquote><a id="more"></a><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>-c: 建立压缩档案<br>-x：解压<br>-t：查看内容<br>-r：向压缩归档文件末尾追加文件<br>-u：更新原压缩包中的文件  </p><p><strong>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。</strong></p><hr><p>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出     </p><p>下面的参数-f是必须的   </p><h6 id="f-使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名"><a href="#f-使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名" class="headerlink" title="-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名."></a>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名.</h6><hr><ol><li><p>将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">tar</span> <span class="selector-tag">-cf</span> <span class="selector-tag">all</span><span class="selector-class">.tar</span> *<span class="selector-class">.jpg</span></span><br></pre></td></tr></table></figure></li><li><p>将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">tar</span> <span class="selector-tag">-rf</span> <span class="selector-tag">all</span><span class="selector-class">.tar</span> *<span class="selector-class">.gif</span></span><br></pre></td></tr></table></figure></li><li><p>更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">tar</span> <span class="selector-tag">-uf</span> <span class="selector-tag">all</span><span class="selector-class">.tar</span> <span class="selector-tag">logo</span><span class="selector-class">.gif</span></span><br></pre></td></tr></table></figure></li><li><p>列出all.tar包中所有文件，-t是列出文件的意思</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># tar -tf all.tar</span></span><br></pre></td></tr></table></figure></li><li><p>解出all.tar包中所有文件，-t是解开的意思</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># tar -xf all.tar</span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><ol><li><p>将目录里所有jpg文件打包成tar.jpg </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-cvf</span> <span class="selector-tag">jpg</span><span class="selector-class">.tar</span> *<span class="selector-class">.jpg</span></span><br></pre></td></tr></table></figure></li><li><p>将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-czf</span> <span class="selector-tag">jpg</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> *<span class="selector-class">.jpg</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-cjf</span> <span class="selector-tag">jpg</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span> *<span class="selector-class">.jpg</span></span><br></pre></td></tr></table></figure><ol start="4"><li>将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-cZf</span> <span class="selector-tag">jpg</span><span class="selector-class">.tar</span><span class="selector-class">.Z</span> *<span class="selector-class">.jpg</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p> rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux</p></blockquote><blockquote><p> zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux</p></blockquote><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf file<span class="selector-class">.tar</span>       <span class="comment">//解压 tar包</span></span><br><span class="line"></span><br><span class="line">tar -xzvf file<span class="selector-class">.tar</span><span class="selector-class">.gz</span>   <span class="comment">//解压tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -xjvf file<span class="selector-class">.tar</span><span class="selector-class">.bz2</span>  <span class="comment">//解压 tar.bz2</span></span><br><span class="line"></span><br><span class="line">tar -xZvf file<span class="selector-class">.tar</span><span class="selector-class">.Z</span>    <span class="comment">//解压tar.Z</span></span><br><span class="line"></span><br><span class="line">unrar e file<span class="selector-class">.rar</span>        <span class="comment">//解压rar</span></span><br><span class="line"></span><br><span class="line">unzip file<span class="selector-class">.zip</span>          <span class="comment">//解压zip</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></blockquote><ol><li>*.tar 用 tar -xvf 解压    </li><li>*.gz 用 gzip -d或者gunzip 解压</li><li><em>.tar.gz和</em>.tgz 用 tar -xzf 解压</li><li>*.bz2 用 bzip2 -d或者用bunzip2 解压</li><li>*.tar.bz2用tar -xjf 解压</li><li>*.Z 用 uncompress 解压</li><li>*.tar.Z 用tar -xZf 解压</li><li>*.rar 用 unrar e解压</li><li>*.zip 用 unzip 解压</li></ol><hr><p>解压jdk到指定文件夹：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf jdk-<span class="number">8</span>u131-linux-x64<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /usr/local/java</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Linux下的tar压缩解压缩命令详解&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="tar" scheme="http://yoursite.com/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译VLC(vlc-3.0.4)</title>
    <link href="http://yoursite.com/2018/11/30/ubuntu_%E7%BC%96%E8%AF%91VLC-vlc-3-0-4/"/>
    <id>http://yoursite.com/2018/11/30/ubuntu_编译VLC-vlc-3-0-4/</id>
    <published>2018-11-29T22:09:01.000Z</published>
    <updated>2019-06-18T07:13:50.374Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ubuntu编译VLC(vlc-3.0.4) 源码<br>VLC多媒体播放器（最初命名为VideoLAN客户端）是VideoLAN计划的多媒体播放器。</p></blockquote><a id="more"></a><h5 id="1-首先安装必须的依赖软件，打开终端，执行："><a href="#1-首先安装必须的依赖软件，打开终端，执行：" class="headerlink" title="1.首先安装必须的依赖软件，打开终端，执行："></a>1.首先安装必须的依赖软件，打开终端，执行：</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install </span>git libtool <span class="keyword">build-essential </span>pkg-<span class="built_in">config</span> autoconf</span><br></pre></td></tr></table></figure><h5 id="2-从-http-www-videolan-org-vlc-download-sources-html-下载vlc-3-0-4源码，将其存放到-home-test-VLC目录下，解压缩："><a href="#2-从-http-www-videolan-org-vlc-download-sources-html-下载vlc-3-0-4源码，将其存放到-home-test-VLC目录下，解压缩：" class="headerlink" title="2.从 http://www.videolan.org/vlc/download-sources.html 下载vlc-3.0.4源码，将其存放到/home/test/VLC目录下，解压缩："></a>2.从 <a href="http://www.videolan.org/vlc/download-sources.html" target="_blank" rel="noopener">http://www.videolan.org/vlc/download-sources.html</a> 下载vlc-3.0.4源码，将其存放到/home/test/VLC目录下，解压缩：</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">xz</span> <span class="selector-tag">-dk</span> <span class="selector-tag">vlc-3</span><span class="selector-class">.0</span><span class="selector-class">.4</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span> </span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">xvf</span> <span class="selector-tag">vlc-3</span><span class="selector-class">.0</span><span class="selector-class">.4</span><span class="selector-class">.tar</span></span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">vlc-3</span><span class="selector-class">.0</span><span class="selector-class">.4</span></span><br></pre></td></tr></table></figure><h5 id="3-获取第三方库："><a href="#3-获取第三方库：" class="headerlink" title="3. 获取第三方库："></a>3. 获取第三方库：</h5><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> apt-<span class="meta">get</span> <span class="keyword">build-dep </span>vlc</span><br></pre></td></tr></table></figure><p>注意这个地方开始的时候老是提示无法获取依赖库，原因是所选择的服务器他不提供这个依赖库，所以需要选择最佳服务器，设置-》软件和更新-》下载自-》选择最佳服务器。</p><h5 id="4-配置VLC，指定VLC的安装目录-home-test-VLC："><a href="#4-配置VLC，指定VLC的安装目录-home-test-VLC：" class="headerlink" title="4. 配置VLC，指定VLC的安装目录/home/test/VLC："></a>4. 配置VLC，指定VLC的安装目录/home/test/VLC：</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="regexp">/configure --prefix=/</span>home<span class="regexp">/test/</span>VLC</span><br></pre></td></tr></table></figure><p>直接 ./configure 也可以，有报错的时候 sudo apt-get build-dep vlc多下几次。</p><h5 id="5-编译VLC："><a href="#5-编译VLC：" class="headerlink" title="5. 编译VLC："></a>5. 编译VLC：</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">make</span></span><br></pre></td></tr></table></figure><h5 id="6-运行VLC，验证是否一切正确："><a href="#6-运行VLC，验证是否一切正确：" class="headerlink" title="6. 运行VLC，验证是否一切正确："></a>6. 运行VLC，验证是否一切正确：</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./vlc</span></span><br></pre></td></tr></table></figure><h5 id="7-安装VLC-可选-："><a href="#7-安装VLC-可选-：" class="headerlink" title="7. 安装VLC(可选)："></a>7. 安装VLC(可选)：</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make <span class="keyword">install</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ubuntu编译VLC(vlc-3.0.4) 源码&lt;br&gt;VLC多媒体播放器（最初命名为VideoLAN客户端）是VideoLAN计划的多媒体播放器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="VLC" scheme="http://yoursite.com/tags/VLC/"/>
    
      <category term="make" scheme="http://yoursite.com/tags/make/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下nfs安装配置</title>
    <link href="http://yoursite.com/2018/11/29/ubuntu_%E4%B8%8Bnfs%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/11/29/ubuntu_下nfs安装配置/</id>
    <published>2018-11-29T12:00:00.000Z</published>
    <updated>2019-06-18T07:13:34.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以像访问本地文件一样透明地读写位于远端NFS服务器上的文件。</p></blockquote><hr><a id="more"></a><h2 id="NFS-服务端"><a href="#NFS-服务端" class="headerlink" title="NFS 服务端"></a>NFS 服务端</h2><h4 id="1-安装NFS"><a href="#1-安装NFS" class="headerlink" title="1.安装NFS"></a>1.安装NFS</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="built_in">nfs</span>-kernel-server</span><br></pre></td></tr></table></figure><h4 id="2-建立nfs共享文件夹"><a href="#2-建立nfs共享文件夹" class="headerlink" title="2. 建立nfs共享文件夹"></a>2. 建立nfs共享文件夹</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /<span class="built_in">home</span>/test/nfs_dir</span><br></pre></td></tr></table></figure><h4 id="3-编辑-etc-exports配置nfs"><a href="#3-编辑-etc-exports配置nfs" class="headerlink" title="3. 编辑/etc/exports配置nfs"></a>3. 编辑/etc/exports配置nfs</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>exports</span><br></pre></td></tr></table></figure><h4 id="4-在文档的最后一行加入如下并保存退出"><a href="#4-在文档的最后一行加入如下并保存退出" class="headerlink" title="4.在文档的最后一行加入如下并保存退出"></a>4.在文档的最后一行加入如下并保存退出</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/test/nfs_dir *(<span class="name">rw</span>,sync,no_root_squash,no_subtree_check)</span><br></pre></td></tr></table></figure><p>/home/test/nfs_dir是要共享的目录<br>*表示允许所有的网段访问，也可以使用具体的IP<br>rw 读写访问sync 所有数据在请求时写入共享<br>async nfs在写入数据前可以响应请求<br>secure nfs通过1024以下的安全TCP/IP端口发送<br>insecure nfs通过1024以上的端口发送<br>wdelay 如果多个用户要写入nfs目录，则归组写入（默认）<br>no_wdelay 如果多个用户要写入nfs目录，则立即写入，当使用async时，无需此设置。<br>hide 在nfs共享目录中不共享其子目录<br>no_hide 共享nfs目录的子目录<br>subtree_check 如果共享/usr/bin之类的子目录时，强制nfs检查父目录的权限（默认）<br>no_subtree_check 和上面相对，不检查父目录权限<br>all_squash 共享文件的UID和GID映射匿名用户anonymous，适合公用目录。<br>no_all_squash 保留共享文件的UID和GID（默认）<br>root_squash root用户的所有请求映射成如anonymous用户一样的权限（默认）<br>no_root_squas root用户具有根目录的完全管理访问权限<br>anonuid=xxx 指定nfs服务器/etc/passwd文件中匿名用户的UID    </p><h4 id="5-重启rpcbind"><a href="#5-重启rpcbind" class="headerlink" title="5.重启rpcbind"></a>5.重启rpcbind</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/rpcbind restart</span></span><br></pre></td></tr></table></figure><h4 id="6-restart-重启nfs"><a href="#6-restart-重启nfs" class="headerlink" title="6.restart 重启nfs"></a>6.restart 重启nfs</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d<span class="regexp">/nfs-kernel-server</span></span><br></pre></td></tr></table></figure><h4 id="7-测试运行以下命令来显示一下共享出来的目录"><a href="#7-测试运行以下命令来显示一下共享出来的目录" class="headerlink" title="7.测试运行以下命令来显示一下共享出来的目录"></a>7.测试运行以下命令来显示一下共享出来的目录</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">showmount -e</span></span><br></pre></td></tr></table></figure><hr><h5 id="在目标机中挂载服务器的共享文件夹"><a href="#在目标机中挂载服务器的共享文件夹" class="headerlink" title="在目标机中挂载服务器的共享文件夹"></a>在目标机中挂载服务器的共享文件夹</h5><blockquote><p>sudo mount -t nfs 192.168.2.109:/home/test/nfs_dir /mnt/nfs</p></blockquote><p>把以上指令写到/etc/rc.local 当中可实现开机自动挂载   </p><hr><h3 id="nfs-client端安装与配置："><a href="#nfs-client端安装与配置：" class="headerlink" title="nfs client端安装与配置："></a>nfs client端安装与配置：</h3><ol><li><p>nfs client安装    </p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sudo</span> apt-<span class="meta">get</span> install nfs-<span class="meta">common</span></span><br></pre></td></tr></table></figure></li><li><p>查看nfs server上共享的目录    </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">showmount -e &lt;ip<span class="built_in"> address </span>of nfs server&gt;    </span><br><span class="line"><span class="comment">#例如showmount -e 192.168.xx.xx</span></span><br></pre></td></tr></table></figure></li><li><p>创建挂载点</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /<span class="built_in">path</span>-to-mount</span><br><span class="line">chmod <span class="number">777</span> -R /<span class="built_in">path</span>-to-mount</span><br><span class="line">mount -t nfs <span class="number">192</span>.<span class="number">168</span>.xx.xx:/<span class="built_in">path</span>-to-share /<span class="built_in">path</span>-to-mount</span><br></pre></td></tr></table></figure></li></ol><p>4.开机自动挂载：<br>sudo mount -t nfs 192.168.2.109:/home/test/nfs_dir /mnt/nfs 添加到/etc/rc.local，开机就会自动挂载了</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;NFS（Network File System）即网络文件系统，是FreeBSD支持的文件系统中的一种，它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以像访问本地文件一样透明地读写位于远端NFS服务器上的文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="nfs" scheme="http://yoursite.com/tags/nfs/"/>
    
      <category term="install" scheme="http://yoursite.com/tags/install/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu编译ffmpeg</title>
    <link href="http://yoursite.com/2018/11/28/ubuntu_%E7%BC%96%E8%AF%91ffmpeg/"/>
    <id>http://yoursite.com/2018/11/28/ubuntu_编译ffmpeg/</id>
    <published>2018-11-27T22:19:02.000Z</published>
    <updated>2019-06-18T07:13:43.206Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ffmpeg 源码编译<br><a id="more"></a></p></blockquote><h2 id="Ubuntu上编译安装"><a href="#Ubuntu上编译安装" class="headerlink" title="Ubuntu上编译安装"></a>Ubuntu上编译安装</h2><h4 id="1-安装yasm-不安装后面会报错：报错-yasm-nasm-包不存在或者很旧"><a href="#1-安装yasm-不安装后面会报错：报错-yasm-nasm-包不存在或者很旧" class="headerlink" title="1.安装yasm 不安装后面会报错：报错 yasm/nasm 包不存在或者很旧"></a>1.安装yasm 不安装后面会报错：报错 yasm/nasm 包不存在或者很旧</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install yasm</span><br></pre></td></tr></table></figure><h4 id="2-安装第三方库-x264"><a href="#2-安装第三方库-x264" class="headerlink" title="2.安装第三方库:x264"></a>2.安装第三方库:x264</h4><p>不安装H.264第三方库使用H.264的时候会报错Cannot load libcuda.so.1<br><a href="http://download.videolan.org/pub/videolan/x264/snapshots/" target="_blank" rel="noopener">下载网址</a><br>文件名: last_stable_x264.tar.bz2<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure–<span class="keyword">enable</span>−shared–<span class="keyword">disable</span>−asm./configure–<span class="keyword">enable</span>−shared–<span class="keyword">disable</span>−asm <span class="built_in">make</span> </span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></p><h3 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h3><h4 id="1-解压缩"><a href="#1-解压缩" class="headerlink" title="1.解压缩"></a>1.解压缩</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xvjf</span> <span class="selector-tag">ffmpeg-3</span><span class="selector-class">.4</span><span class="selector-class">.1</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br></pre></td></tr></table></figure><h4 id="2-配置ffmpeg"><a href="#2-配置ffmpeg" class="headerlink" title="2.配置ffmpeg"></a>2.配置ffmpeg</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--enable-shared</span> <span class="params">--enable-libx264</span> <span class="params">--enable-gpl</span> <span class="params">--prefix=tmp</span></span><br></pre></td></tr></table></figure><p>–enable-shared：指定生成动态库，默认是静态库。</p><h4 id="3-安装ffmpeg"><a href="#3-安装ffmpeg" class="headerlink" title="3.安装ffmpeg"></a>3.安装ffmpeg</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><h6 id="在tmp目录中可以看到bin-include-lib-share"><a href="#在tmp目录中可以看到bin-include-lib-share" class="headerlink" title="在tmp目录中可以看到bin include lib share"></a>在tmp目录中可以看到bin include lib share</h6><h6 id="ffmpeg正常安装后执行ffmpeg时出现如下错误："><a href="#ffmpeg正常安装后执行ffmpeg时出现如下错误：" class="headerlink" title="ffmpeg正常安装后执行ffmpeg时出现如下错误："></a>ffmpeg正常安装后执行ffmpeg时出现如下错误：</h6><p>==ffmpeg: error while loading shared libraries: libavdevice.so.53: cannot open shared object file: No such file or directory==</p><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>编辑 /etc/ld.so.conf 文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ld<span class="selector-class">.so</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure></p><p>加入：lib 目录  然后执行<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ldconfig</span></span><br></pre></td></tr></table></figure></p><h5 id="ESM6802-板子编译"><a href="#ESM6802-板子编译" class="headerlink" title="ESM6802 板子编译"></a>ESM6802 板子编译</h5><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./configure</span> <span class="params">--enable-cross-compile</span> <span class="params">--arch=</span><span class="string">"armv7-a"</span></span><br><span class="line"><span class="params">--enable-pic</span>      </span><br><span class="line"><span class="params">--enable-shared</span> </span><br><span class="line"><span class="params">--disable-static</span> </span><br><span class="line"><span class="params">--target-os=linux</span> </span><br><span class="line"><span class="params">--cross-prefix=</span><span class="string">"arm-emtronix-linux-gnueabi-"</span>    </span><br><span class="line"><span class="params">--sysroot=</span><span class="string">"/opt/fsl-imx-x11/4.1.15-2.0.1/sysroots/cortexa9hf-neon-emtronix-linux-gnueabi"</span></span><br><span class="line"><span class="params">--disable-asm</span> <span class="params">--extra-cflags=</span><span class="string">"-march=armv7-a -mfpu=neon -mtune=cortex-a9-mfloat-abi=hard -mcpu=cortex-a9 -fPIC"</span> </span><br><span class="line"><span class="params">--extra-ldflags=</span><span class="string">"-march=armv7-a -mfpu=neon -mtune=cortex-a9-mfloat-abi=hard -mcpu=cortex-a9 -fPIC"</span> </span><br><span class="line"><span class="params">--prefix=tmp</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ffmpeg 源码编译&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="make" scheme="http://yoursite.com/tags/make/"/>
    
      <category term="ffmpeg" scheme="http://yoursite.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>Git安装和简单使用</title>
    <link href="http://yoursite.com/2018/11/25/Git_%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/25/Git_安装和简单使用/</id>
    <published>2018-11-25T07:22:18.000Z</published>
    <updated>2019-06-18T03:44:25.555Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h4><p>在Windows上使用Git，可以从<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网</a>直接下载安装程序，然后按默认选项安装即可。<br>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p><p>安装完成后，还需要最后一步设置，在命令行输入：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>基本操作步骤<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://xxxxxxxxx.git</span><br><span class="line"></span><br><span class="line">git pull 远程库名 <span class="literal">master</span></span><br><span class="line">git add -A   <span class="comment">#表示把项目里面全部文件添加进列表 </span></span><br><span class="line">git commit -m <span class="string">"Hello world"</span></span><br><span class="line">git push -u 远程库名 <span class="keyword">master</span>   <span class="title">#第一次使用push</span>的时候加上-u,以后可不加</span><br></pre></td></tr></table></figure></p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><h6 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h6><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> gitTest</span><br><span class="line"><span class="built_in">cd</span> gitTest</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>成功提示  Initialized empty Git repository in XXX.git/</p><h6 id="2-把文件添加到仓库-用命令git-add告诉Git"><a href="#2-把文件添加到仓库-用命令git-add告诉Git" class="headerlink" title="2.把文件添加到仓库,用命令git add告诉Git"></a>2.把文件添加到仓库,用命令git add告诉Git</h6><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">add</span><span class="bash"> readme.txt</span></span><br></pre></td></tr></table></figure><h6 id="3-把文件提交到仓库-用命令git-commit告诉Git"><a href="#3-把文件提交到仓库-用命令git-commit告诉Git" class="headerlink" title="3.把文件提交到仓库,用命令git commit告诉Git"></a>3.把文件提交到仓库,用命令git commit告诉Git</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">commit</span> -m <span class="string">"wrote a readme file"</span></span><br><span class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) eaadf4e] wrote a readme <span class="keyword">file</span></span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> readme.txt</span><br></pre></td></tr></table></figure><p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的   </p><hr><blockquote><p>初始化一个Git仓库，使用git init命令。<br>添加文件到Git仓库，分两步：<br>1.使用命令git add <file>，注意，可反复多次使用，添加多个文件；<br>2.使用命令git commit -m <message>，完成。   </message></file></p></blockquote><h6 id="4-运行git-status命令看看结果"><a href="#4-运行git-status命令看看结果" class="headerlink" title="4.运行git status命令看看结果"></a>4.运行git status命令看看结果</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>git status命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。</p><h6 id="5-用-git-diff-查看修改内容，顾名思义就是查看difference。"><a href="#5-用-git-diff-查看修改内容，顾名思义就是查看difference。" class="headerlink" title="5.用 git diff 查看修改内容，顾名思义就是查看difference。"></a>5.用 git diff 查看修改内容，顾名思义就是查看difference。</h6><p>知道修改哪些内容后可以</p><ol><li>git add<br>2.git commit<br>3.再运行git status看看当前仓库的状态.</li></ol><blockquote><p>要随时掌握工作区的状态，使用git status命令。<br>如果git status告诉你有文件被修改过，用git diff可以查看修改内容</p></blockquote><h6 id="6-用git-log命令查看从最近到最远的提交日志"><a href="#6-用git-log命令查看从最近到最远的提交日志" class="headerlink" title="6.用git log命令查看从最近到最远的提交日志"></a>6.用git log命令查看从最近到最远的提交日志</h6><p>看到的一大串类似1094adb…的是commit id（版本号）</p><h6 id="7-时光穿梭机，回退到上一个版本。"><a href="#7-时光穿梭机，回退到上一个版本。" class="headerlink" title="7.时光穿梭机，回退到上一个版本。"></a>7.时光穿梭机，回退到上一个版本。</h6><p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100 。<br>回退到上一个版本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br><span class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> e475afc <span class="keyword">add</span> <span class="keyword">distributed</span></span><br></pre></td></tr></table></figure><blockquote><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard commit_id</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p></blockquote><h6 id="git-log-退出-英文状态下按-Q"><a href="#git-log-退出-英文状态下按-Q" class="headerlink" title="git log 退出 英文状态下按 Q"></a>git log 退出 英文状态下按 Q</h6><hr><h3 id="git放弃修改"><a href="#git放弃修改" class="headerlink" title="git放弃修改"></a>git放弃修改</h3><p>本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改<br>单个文件/文件夹：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- filename</span></span><br></pre></td></tr></table></figure><p>所有文件/文件夹：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout .</span><br></pre></td></tr></table></figure><p>本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。<br>单个文件/文件夹：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">rm</span> filename / <span class="keyword">rm</span> <span class="keyword">dir</span> -rf</span><br></pre></td></tr></table></figure><p>所有文件/文件夹：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clean -xdf</span><br></pre></td></tr></table></figure><p>// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！<br>本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。<br>单个文件/文件夹：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> filename</span><br></pre></td></tr></table></figure><p>所有文件/文件夹：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="keyword">HEAD</span> .</span><br></pre></td></tr></table></figure><h6 id="GIT-单个文件修改比较"><a href="#GIT-单个文件修改比较" class="headerlink" title="GIT 单个文件修改比较"></a>GIT 单个文件修改比较</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>git log 文件名           （查看提交的ID）</span><br><span class="line"><span class="bullet">2. </span>git diff commitid:文件名 commitid:文件名</span><br></pre></td></tr></table></figure><p>git log -p 文件名 可以看到具体文件修改记录</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;在Windows上安装Git&quot;&gt;&lt;a href=&quot;#在Windows上安装Git&quot; class=&quot;headerlink&quot; title=&quot;在Windows上安装Git&quot;&gt;&lt;/a&gt;在Windows上安装Git&lt;/h4&gt;&lt;p&gt;在Windows上使用Git，可以从&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git官网&lt;/a&gt;直接下载安装程序，然后按默认选项安装即可。&lt;br&gt;安装完成后，在开始菜单里找到“Git”-&amp;gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！&lt;/p&gt;
&lt;p&gt;安装完成后，还需要最后一步设置，在命令行输入：&lt;br&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git&lt;span class=&quot;built_in&quot;&gt; config &lt;/span&gt;--global user.name &lt;span class=&quot;string&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git&lt;span class=&quot;built_in&quot;&gt; config &lt;/span&gt;--global user.email &lt;span class=&quot;string&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MFC_自定义消息步骤</title>
    <link href="http://yoursite.com/2018/11/23/MFC_%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/11/23/MFC_自定义消息步骤/</id>
    <published>2018-11-23T02:07:33.000Z</published>
    <updated>2019-06-18T07:17:05.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="VC-MFC自定义消息步骤"><a href="#VC-MFC自定义消息步骤" class="headerlink" title="VC MFC自定义消息步骤"></a>VC MFC自定义消息步骤</h3><blockquote><p>何谓消息、消息处理函数、消息映射？<br>消息简单的说就是指通过输入设备向程序发出指令要执行某个操作。具体的某个操作是你的一系列代码。称为消息处理函数。</p></blockquote><h5 id="按照类型，Windows将消息分为："><a href="#按照类型，Windows将消息分为：" class="headerlink" title="按照类型，Windows将消息分为："></a>按照类型，Windows将消息分为：</h5><p><img src="/2018/11/23/MFC_自定义消息步骤/pic.png" alt="图片测试"><br><a id="more"></a><br>graph LR<br>消息类型–&gt;系统定义消息<br>消息类型–&gt;程序定义消息<br>系统定义消息–&gt;窗口消息<br>系统定义消息–&gt;命令消息<br>系统定义消息–&gt;控件消息<br>程序定义消息–&gt;WM_USER<br>窗口消息–&gt;WM_CREATE/WM_MOUSEMOVE等<br>命令消息–&gt;WM_COMMAND<br>控件消息–&gt;WM_COMMAND/WM_NOTIFY</p><h5 id="1-头文件加"><a href="#1-头文件加" class="headerlink" title="1. 头文件加"></a>1. 头文件加</h5><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">afx_msg LRESULT OnMyMsg(<span class="keyword">WPARAM</span> <span class="keyword">wParam</span>,<span class="keyword">LPARAM</span> <span class="keyword">lParam</span>)<span class="comment">;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WM_MY_MSG WM_USER+<span class="number">100</span></span></span><br></pre></td></tr></table></figure><h5 id="2-BEGIN-MESSAGE-MAP-和END-MESSAGE-MAP-之中加"><a href="#2-BEGIN-MESSAGE-MAP-和END-MESSAGE-MAP-之中加" class="headerlink" title="2. BEGIN_MESSAGE_MAP 和END_MESSAGE_MAP 之中加"></a>2. BEGIN_MESSAGE_MAP 和END_MESSAGE_MAP 之中加</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ON_MESSAGE</span><span class="params">(WM_MY_MSG,OnMyMsg)</span></span></span><br></pre></td></tr></table></figure><h5 id="3-CPP文件实现"><a href="#3-CPP文件实现" class="headerlink" title="3. CPP文件实现"></a>3. CPP文件实现</h5><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LRESULT CMy10Thread_CreateDlg::OnMyMsg(<span class="keyword">WPARAM</span> <span class="keyword">wParam</span>, <span class="keyword">LPARAM</span> <span class="keyword">lParam</span>)</span><br></pre></td></tr></table></figure><h5 id="4-发送消息"><a href="#4-发送消息" class="headerlink" title="4. 发送消息"></a>4. 发送消息</h5><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">::PostMessage</span>(<span class="name">AfxGetMainWnd</span>()-&gt;m_hWnd,WM_MY_MSG,i,<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h5 id="5-强制类型转-wParam-的消息"><a href="#5-强制类型转-wParam-的消息" class="headerlink" title="5. 强制类型转 wParam 的消息"></a>5. 强制类型转 wParam 的消息</h5><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CString <span class="built_in">str</span>;  </span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">Format</span>(<span class="string">"%d"</span>,wParam);</span><br></pre></td></tr></table></figure><h5 id="6-POST-CString-数据"><a href="#6-POST-CString-数据" class="headerlink" title="6. POST CString 数据"></a>6. POST CString 数据</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CString s_zkzm;</span><br><span class="line">s_zkzm.Format(<span class="string">"123456789123456789"</span>);</span><br><span class="line">::PostMessage<span class="function"><span class="params">(AfxGetMainWnd()-&gt;m_hWnd,WM_STUZKZ_MSG,<span class="number">0</span>,LPARAM(<span class="keyword">new</span> CString(s_zkzm)))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//接收</span></span><br><span class="line"><span class="function"><span class="title">LRESULT</span> <span class="title">CCBKVideoCtrlDlg</span>::<span class="title">OnSTUZKZMsg</span><span class="params">(WPARAM wParam,LPARAM lParam)</span></span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="function"><span class="title">CString</span> *<span class="title">pmsg</span>=<span class="params">(CString *)</span><span class="title">lParam</span>;</span></span><br><span class="line"><span class="function"><span class="title">CString</span> <span class="title">temp</span>=*<span class="title">pmsg</span>;</span></span><br><span class="line"><span class="function">//<span class="title">MessageBox</span><span class="params">(temp)</span>;</span></span><br><span class="line"><span class="function">//<span class="title">tcpsock</span>.<span class="title">SendString</span><span class="params">(,MSG_START,temp)</span>;</span></span><br><span class="line"><span class="function"><span class="title">delete</span> <span class="title">pmsg</span>;</span></span><br><span class="line"><span class="function"><span class="title">return</span> 0;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>PostMessage到主窗口<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">::PostMessage</span>(<span class="name">AfxGetMainWnd</span>()-&gt;m_hWnd,WM_CLOSE,<span class="number">0</span>,<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h2 id="响应连续消息ON-COMMAND-RANGE"><a href="#响应连续消息ON-COMMAND-RANGE" class="headerlink" title="响应连续消息ON_COMMAND_RANGE"></a>响应连续消息ON_COMMAND_RANGE</h2><h6 id="1-定义消息"><a href="#1-定义消息" class="headerlink" title="1. 定义消息"></a>1. 定义消息</h6><p>开始结束是连续的ID<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIDEO_MENU_BASE  WM_USER+100 <span class="comment">//开始消息</span></span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIDEO_MENU_END   WM_USER+120 <span class="comment">//结束消息</span></span></span><br></pre></td></tr></table></figure></p><h6 id="2-BEGIN-MESSAGE-MAP-和END-MESSAGE-MAP-之中加-1"><a href="#2-BEGIN-MESSAGE-MAP-和END-MESSAGE-MAP-之中加-1" class="headerlink" title="2. BEGIN_MESSAGE_MAP 和END_MESSAGE_MAP 之中加"></a>2. BEGIN_MESSAGE_MAP 和END_MESSAGE_MAP 之中加</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">ON_COMMAND_RANGE</span><span class="params">(VIDEO_MENU_BASE, VIDEO_MENU_END, OnVideoMenu)</span></span></span><br></pre></td></tr></table></figure><h6 id="3-OnVideoMenu-响应的函数"><a href="#3-OnVideoMenu-响应的函数" class="headerlink" title="3.OnVideoMenu 响应的函数"></a>3.OnVideoMenu 响应的函数</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">afx_msg <span class="keyword">void</span> <span class="title">OnVideoMenu</span><span class="params">(UINT nID)</span></span>;<span class="comment">//头文件</span></span><br></pre></td></tr></table></figure><h6 id="4-函数实现"><a href="#4-函数实现" class="headerlink" title="4.函数实现"></a>4.函数实现</h6><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CPlayWnd::OnVideoMenu(UINT nID)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(nID)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;VC-MFC自定义消息步骤&quot;&gt;&lt;a href=&quot;#VC-MFC自定义消息步骤&quot; class=&quot;headerlink&quot; title=&quot;VC MFC自定义消息步骤&quot;&gt;&lt;/a&gt;VC MFC自定义消息步骤&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;何谓消息、消息处理函数、消息映射？&lt;br&gt;消息简单的说就是指通过输入设备向程序发出指令要执行某个操作。具体的某个操作是你的一系列代码。称为消息处理函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;按照类型，Windows将消息分为：&quot;&gt;&lt;a href=&quot;#按照类型，Windows将消息分为：&quot; class=&quot;headerlink&quot; title=&quot;按照类型，Windows将消息分为：&quot;&gt;&lt;/a&gt;按照类型，Windows将消息分为：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;/2018/11/23/MFC_自定义消息步骤/pic.png&quot; alt=&quot;图片测试&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MFC" scheme="http://yoursite.com/categories/MFC/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>JOB定时执行存储过程</title>
    <link href="http://yoursite.com/2018/11/03/JOB%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/11/03/JOB定时执行存储过程/</id>
    <published>2018-11-03T02:07:33.000Z</published>
    <updated>2019-05-14T08:05:18.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建JOB定时执行存储过程"><a href="#创建JOB定时执行存储过程" class="headerlink" title="创建JOB定时执行存储过程"></a>创建JOB定时执行存储过程</h3><blockquote><p>[Oracle]使用dbms_job包创建Oracle定时任务<br> 在Oracle的包里面，有一个名字叫做DBMS_JOB的包，它的作用是安排和管理作业队列。<br><a id="more"></a></p></blockquote><h5 id="1-创建JOB"><a href="#1-创建JOB" class="headerlink" title="1.创建JOB"></a>1.创建JOB</h5><h6 id="1-SUBMIT-该过程用于建立一个新的作业"><a href="#1-SUBMIT-该过程用于建立一个新的作业" class="headerlink" title="1.SUBMIT 该过程用于建立一个新的作业."></a>1.SUBMIT 该过程用于建立一个新的作业.</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DBMS_JOB.SUBMIT(</span><br><span class="line">   JOB OUT BINARY_INTERGER,</span><br><span class="line">   WHAT <span class="keyword">IN</span> VARCHAR2，</span><br><span class="line">   NEXT_DATE <span class="keyword">IN</span> DATE<span class="built_in"> DEFAULT </span>SYSDATE,</span><br><span class="line">   INTERVAL <span class="keyword">IN</span> VARCHAR2<span class="built_in"> DEFAULT </span>‘<span class="literal">NULL</span>’,</span><br><span class="line">   NO_PARSE <span class="keyword">IN</span> BOOLEAN<span class="built_in"> DEFAULT </span><span class="literal">FALSE</span>,</span><br><span class="line">  <span class="built_in"> INSTANCE </span><span class="keyword">IN</span> BINARY_INTEGER<span class="built_in"> DEFAULT </span>ANY_INSTANCE,</span><br><span class="line">   FORCE <span class="keyword">IN</span> BOOLEAN<span class="built_in"> DEFAULT </span><span class="literal">FALSE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明:"></a>参数说明:</h6><table><thead><tr><th>编号</th><th>参数</th><th>参数说明</th></tr></thead><tbody><tr><td>1</td><td>job</td><td>用于指定作业编号</td></tr><tr><td>2</td><td>what</td><td>用于指定作业要执行的操作</td></tr><tr><td>3</td><td>next_date</td><td>用于指定该操作的下一次运行的日期</td></tr><tr><td>4</td><td>interval</td><td>用于指定该操作的时间间隔</td></tr><tr><td>5</td><td>no_parse</td><td>用于指定是否需要解析与作业相关的过程</td></tr><tr><td>6</td><td>instance</td><td>用于指定哪个例程可以运行作业</td></tr><tr><td>7</td><td>force</td><td>用于指定是否强制运行与作业相关的例程</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span></span><br><span class="line">  jobno binary_integer;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">--提交,操作的时间间隔设置为1分钟</span></span><br><span class="line">  dbms_job.submit(jobno,<span class="string">'insert_job();'</span>,<span class="keyword">sysdate</span>,<span class="string">'sysdate+1/(24*60)'</span>);</span><br><span class="line">  <span class="comment">--打印序列号</span></span><br><span class="line">  dbms_output.put_line('jobno='||jobno);</span><br><span class="line">  <span class="comment">--运行</span></span><br><span class="line">  dbms_job.run(jobno);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span>  test_job_PJHGR <span class="built_in">number</span>;  </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line">dbms_job.submit(test_job_PJHGR,<span class="string">'SP_JSpjhgr;'</span>,<span class="keyword">sysdate</span>,<span class="string">'TRUNC(SYSDATE + 1)'</span>);  </span><br><span class="line"><span class="keyword">commit</span>;  </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line">dbms_job.run(<span class="number">21</span>);  </span><br><span class="line"><span class="keyword">commit</span>;  </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sys.user_jobs</span><br></pre></td></tr></table></figure><p>下面是存储过程 查询统计并更新</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">SP_JSpjhgr</span></span></span><br><span class="line"><span class="function"><span class="title">IS</span></span></span><br><span class="line"><span class="function"><span class="title">kfxmNum</span> <span class="title">NUMBER</span>;</span></span><br><span class="line">cursor c_job <span class="keyword">is</span></span><br><span class="line">       <span class="keyword">select</span> 项目编号,count<span class="comment">(*) as XMN from errorrecords where  错误编号='10002' group by 项目编号;</span></span><br><span class="line"><span class="comment">c_row c_job%rowtype;</span></span><br><span class="line"><span class="comment">BEGIN</span></span><br><span class="line"><span class="comment">      for c_row in c_job loop</span></span><br><span class="line"><span class="comment">          if c_row.XMN &lt;&gt;0 then</span></span><br><span class="line"><span class="comment">          select count(*)</span> <span class="keyword">into</span> kfxmNum <span class="keyword">from</span> errorrecords <span class="keyword">where</span> 扣分状态=<span class="string">'1'</span> <span class="keyword">and</span> 错误编号=<span class="string">'10002'</span> <span class="keyword">and</span> 项目编号=c_row.项目编号;</span><br><span class="line">          <span class="keyword">if</span> kfxmNum&lt;&gt;<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          update magercfg <span class="keyword">set</span> 信息=to_char(kfxmNum/c_row.XMN*<span class="number">100</span>,<span class="string">'999D99'</span>) <span class="keyword">where</span> 类型=<span class="string">'pj'</span> <span class="keyword">and</span> 参数=to_char(c_row.项目编号);</span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">END</span> SP_JSpjhgr;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建JOB定时执行存储过程&quot;&gt;&lt;a href=&quot;#创建JOB定时执行存储过程&quot; class=&quot;headerlink&quot; title=&quot;创建JOB定时执行存储过程&quot;&gt;&lt;/a&gt;创建JOB定时执行存储过程&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;[Oracle]使用dbms_job包创建Oracle定时任务&lt;br&gt; 在Oracle的包里面，有一个名字叫做DBMS_JOB的包，它的作用是安排和管理作业队列。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>数据库游标的使用</title>
    <link href="http://yoursite.com/2018/11/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%B8%B8%E6%A0%87%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/03/数据库游标的使用/</id>
    <published>2018-11-03T01:37:01.000Z</published>
    <updated>2019-05-14T08:05:18.603Z</updated>
    
    <content type="html"><![CDATA[<blockquote></blockquote><h2 id="SQLServer数据库游标"><a href="#SQLServer数据库游标" class="headerlink" title="SQLServer数据库游标"></a>SQLServer数据库游标</h2><a id="more"></a><h5 id="游标循环处理数据"><a href="#游标循环处理数据" class="headerlink" title="游标循环处理数据"></a>游标循环处理数据</h5><h6 id="1-定义游标"><a href="#1-定义游标" class="headerlink" title="1. 定义游标"></a>1. 定义游标</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> myCursor <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> 查询语句</span><br></pre></td></tr></table></figure><h6 id="2-打开游标"><a href="#2-打开游标" class="headerlink" title="2. 打开游标"></a>2. 打开游标</h6><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPEN</span> myCursor</span><br></pre></td></tr></table></figure><h6 id="3-从游标中取值和循环"><a href="#3-从游标中取值和循环" class="headerlink" title="3. 从游标中取值和循环"></a>3. 从游标中取值和循环</h6><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FETCH <span class="keyword">NEXT</span> <span class="keyword">FROM</span> myCursor <span class="keyword">INTO</span> @zkzmbh</span><br><span class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS=<span class="number">0</span></span><br><span class="line">BEGIN</span><br><span class="line"> ... --处理数据</span><br><span class="line"> FETCH <span class="keyword">NEXT</span> <span class="keyword">FROM</span> myCursor <span class="keyword">INTO</span> @zkzmbh</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h6 id="4-关闭游标"><a href="#4-关闭游标" class="headerlink" title="4. 关闭游标"></a>4. 关闭游标</h6><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CLOSE</span> myCursor</span><br></pre></td></tr></table></figure><h6 id="5-删除游标"><a href="#5-删除游标" class="headerlink" title="5. 删除游标"></a>5. 删除游标</h6><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">DEALLOCATE myCursor</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> @drcs <span class="built_in">int</span></span><br><span class="line"><span class="keyword">declare</span> @kscs <span class="built_in">int</span></span><br><span class="line"><span class="keyword">declare</span> @zkzmbh <span class="built_in">varchar</span> (<span class="number">50</span>)</span><br><span class="line"><span class="comment">--  定义一个游标</span></span><br><span class="line"><span class="keyword">DECLARE</span> updatecs <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> 准考证明编号 <span class="keyword">FROM</span> Studentinfo</span><br><span class="line"><span class="comment">--  打开游标</span></span><br><span class="line"><span class="keyword">OPEN</span> updatecs</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> updatecs <span class="keyword">INTO</span> @zkzmbh</span><br><span class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS=<span class="number">0</span></span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> examrecord <span class="keyword">where</span> 准考证明编号=@zkzmbh)<span class="comment">--先查询在examrecord是否存在记录</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> @kscs=<span class="keyword">Max</span>(考试次数) <span class="keyword">from</span> examrecord <span class="keyword">where</span> 准考证明编号=@zkzmbh</span><br><span class="line"><span class="keyword">select</span> @drcs=<span class="keyword">Max</span>(当日次数) <span class="keyword">from</span> examrecord <span class="keyword">where</span> 准考证明编号=@zkzmbh <span class="keyword">and</span> 考试次数=@kscs</span><br><span class="line"><span class="keyword">update</span> studentinfo <span class="keyword">set</span> 考试次数=@kscs,当日次数=@drcs <span class="keyword">where</span> 准考证明编号=@zkzmbh</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> updatecs <span class="keyword">INTO</span> @zkzmbh <span class="comment">--取下一条</span></span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line"><span class="comment">-- 关闭游标</span></span><br><span class="line"><span class="keyword">CLOSE</span> updatecs</span><br><span class="line"><span class="keyword">DEALLOCATE</span> updatecs <span class="comment">--(删除游标)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SQLServer数据库游标&quot;&gt;&lt;a href=&quot;#SQLServer数据库游标&quot; class=&quot;headerlink&quot; title=&quot;SQLServer数据库游标&quot;&gt;&lt;/a&gt;SQLServer数据库游标&lt;/h2&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQLServer" scheme="http://yoursite.com/tags/SQLServer/"/>
    
  </entry>
  
  <entry>
    <title>std_setw(size)与std_setfill(char)</title>
    <link href="http://yoursite.com/2018/11/03/std_setw(size)%E4%B8%8Estd_setfill(char)/"/>
    <id>http://yoursite.com/2018/11/03/std_setw(size)与std_setfill(char)/</id>
    <published>2018-11-03T01:36:54.000Z</published>
    <updated>2019-05-14T08:05:18.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>std::setw(size)与 std::setfill(char)</p></blockquote><h4 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h4><p>std::setw ：需要填充多少个字符,默认填充的字符为’ ‘空格<br>std::setfill：设置 std::setw 将填充什么样的字符,如:std::setfill(‘*‘)   </p><a id="more"></a><p>头文件:</p><p>#include <iostream></iostream></p><p>#include <iomanip><br>using namespace std;</iomanip></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">     <span class="comment">//输出:    1 前面三个空格填充</span></span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::setw(<span class="number">4</span>)&lt;&lt;a&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">     <span class="comment">//输出: ***1 设置用*号填充</span></span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::setw(<span class="number">4</span>)&lt;&lt;<span class="built_in">std</span>::setfill(<span class="string">'*'</span>)&lt;&lt;a&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//输出:***12</span></span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">     <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="built_in">std</span>::setw(<span class="number">4</span>)&lt;&lt;<span class="built_in">std</span>::setfill(<span class="string">'*'</span>)&lt;&lt;a&lt;&lt;b&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">     system(<span class="string">"pause"</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;std::setw(size)与 std::setfill(char)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能:&quot;&gt;&lt;/a&gt;功能:&lt;/h4&gt;&lt;p&gt;std::setw ：需要填充多少个字符,默认填充的字符为’ ‘空格&lt;br&gt;std::setfill：设置 std::setw 将填充什么样的字符,如:std::setfill(‘*‘)   &lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>VS中如何统计整个项目的代码行数</title>
    <link href="http://yoursite.com/2018/11/03/VS%E4%B8%AD%E5%A6%82%E4%BD%95%E7%BB%9F%E8%AE%A1%E6%95%B4%E4%B8%AA%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0/"/>
    <id>http://yoursite.com/2018/11/03/VS中如何统计整个项目的代码行数/</id>
    <published>2018-11-03T01:36:53.000Z</published>
    <updated>2019-05-14T08:05:18.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="VS-中如何统计整个项目的代码行数"><a href="#VS-中如何统计整个项目的代码行数" class="headerlink" title="VS 中如何统计整个项目的代码行数"></a>VS 中如何统计整个项目的代码行数</h4></blockquote><blockquote><ol><li>vs编辑 | 查找和替换 | 在文件中查找</li><li>查找选项选 选择正则表达式</li><li>^b<em>[^:b#/]+.</em>$</li></ol></blockquote><p>Ctrl + Shift + F 打开查找替换窗口<br>输入如下内容，查找选项选 选择正则表达式<br>查找全部</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^b*[^<span class="symbol">:b</span><span class="comment">#/]+.*$</span></span><br></pre></td></tr></table></figure><p>结果在查找结果的最后一行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h4 id=&quot;VS-中如何统计整个项目的代码行数&quot;&gt;&lt;a href=&quot;#VS-中如何统计整个项目的代码行数&quot; class=&quot;headerlink&quot; title=&quot;VS 中如何统计整个项目的代码行数&quot;&gt;&lt;/a&gt;VS 中如何统计整个项目的代码行数&lt;/h4&gt;
      
    
    </summary>
    
      <category term="MFC" scheme="http://yoursite.com/categories/MFC/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>设置注册表使程序开机自启动</title>
    <link href="http://yoursite.com/2018/11/03/%E8%AE%BE%E7%BD%AE%E6%B3%A8%E5%86%8C%E8%A1%A8%E4%BD%BF%E7%A8%8B%E5%BA%8F%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/11/03/设置注册表使程序开机自启动/</id>
    <published>2018-11-03T01:36:52.000Z</published>
    <updated>2019-05-14T08:05:18.604Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>设置注册表使程序开机自启动<br>比较简单的做个注册表的设置<br><a id="more"></a></p></blockquote><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BOOL</span> CCBKFourPicKM3Dlg::Register()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span>  ret = <span class="number">0</span>;</span><br><span class="line">HKEY  hKEY;</span><br><span class="line"><span class="keyword">char</span>  chCurPath[MAX_PATH];</span><br><span class="line">DWORD dwType = REG_SZ;</span><br><span class="line">DWORD dwSize = MAX_PATH;</span><br><span class="line">LPCTSTR lpRegPath = _T(<span class="string">"Software\\Microsoft\\Windows\\CurrentVersion\\Run"</span>);</span><br><span class="line"><span class="comment">//获取当前程序路径</span></span><br><span class="line">::GetModuleFileName(<span class="keyword">NULL</span>, chCurPath, dwSize);</span><br><span class="line">ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, lpRegPath, <span class="number">0</span>, KEY_WRITE, &amp;hKEY);</span><br><span class="line"><span class="keyword">if</span>(ret != ERROR_SUCCESS)</span><br><span class="line">&#123;</span><br><span class="line">RegCloseKey(hKEY);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Set Key</span></span><br><span class="line">ret = RegSetValueEx(hKEY, <span class="string">"CBKZYFourPic"</span>, <span class="keyword">NULL</span>, dwType,</span><br><span class="line">(<span class="keyword">const</span> unsigned <span class="keyword">char</span>*)chCurPath, dwSize);</span><br><span class="line">RegCloseKey(hKEY);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;设置注册表使程序开机自启动&lt;br&gt;比较简单的做个注册表的设置&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MFC" scheme="http://yoursite.com/categories/MFC/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>MFC_设置系统分辨率</title>
    <link href="http://yoursite.com/2018/11/03/MFC_%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <id>http://yoursite.com/2018/11/03/MFC_设置系统分辨率/</id>
    <published>2018-11-03T01:36:51.000Z</published>
    <updated>2019-06-17T09:11:46.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在一些应用实例中，我们需要全屏显示程序，自适应的去调整控件的大小和位置有时候不太美观。</p></blockquote><h2 id="一个简单的方法，设置系统分辨率来完成全屏的显示。"><a href="#一个简单的方法，设置系统分辨率来完成全屏的显示。" class="headerlink" title="一个简单的方法，设置系统分辨率来完成全屏的显示。   "></a>一个简单的方法，设置系统分辨率来完成全屏的显示。   </h2><blockquote><p>1.程序开启自动设置Window系统分辨率,使程序全屏显示<br>2.程序退出时还原 Window系统分辨率</p></blockquote><a id="more"></a><p>.h 定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SM_CXSCREEN_x, SM_CYSCREEN_y;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDevMode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDevModeexit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>.cpp 实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CXXXXApp::SetDevMode()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//保存原始分辨率退出后还原</span></span><br><span class="line">SM_CXSCREEN_x=GetSystemMetrics(SM_CXSCREEN);</span><br><span class="line">SM_CYSCREEN_y=GetSystemMetrics(SM_CYSCREEN);</span><br><span class="line"><span class="comment">//要从配置文件读取 800X600</span></span><br><span class="line"><span class="keyword">if</span> ( SM_CYSCREEN_y !=<span class="number">600</span> || SM_CXSCREEN_x !=<span class="number">800</span>)</span><br><span class="line">&#123;</span><br><span class="line">DEVMODE DevModez;</span><br><span class="line">EnumDisplaySettings(<span class="literal">NULL</span>,ENUM_CURRENT_SETTINGS,&amp;DevModez);<span class="comment">//获取当前的数据</span></span><br><span class="line">DevModez.dmPelsWidth =<span class="number">800</span>;</span><br><span class="line">DevModez.dmPelsHeight=<span class="number">600</span>;</span><br><span class="line">ChangeDisplaySettings(&amp;DevModez,CDS_UPDATEREGISTRY);<span class="comment">//设置生效</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CXXXXApp::SetDevModeexit()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tempx,tempy;</span><br><span class="line"> tempx=GetSystemMetrics(SM_CXSCREEN);</span><br><span class="line"> tempy=GetSystemMetrics(SM_CYSCREEN);</span><br><span class="line"> <span class="keyword">if</span> ( SM_CYSCREEN_y !=tempy || SM_CXSCREEN_x !=tempx)</span><br><span class="line"> &#123;</span><br><span class="line"> DEVMODE DevModez;</span><br><span class="line"> EnumDisplaySettings(<span class="literal">NULL</span>,ENUM_CURRENT_SETTINGS,&amp;DevModez);<span class="comment">//获取当前的数据</span></span><br><span class="line"> DevModez.dmPelsWidth =SM_CXSCREEN_x;</span><br><span class="line"> DevModez.dmPelsHeight=SM_CYSCREEN_y;</span><br><span class="line"> ChangeDisplaySettings(&amp;DevModez,CDS_UPDATEREGISTRY);<span class="comment">//设置生效</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>程序打开时 如 InitInstance() 调用 SetDevMode();<br>程序退出时 如 ExitInstance() 调用 SetDevModeexit();</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在一些应用实例中，我们需要全屏显示程序，自适应的去调整控件的大小和位置有时候不太美观。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一个简单的方法，设置系统分辨率来完成全屏的显示。&quot;&gt;&lt;a href=&quot;#一个简单的方法，设置系统分辨率来完成全屏的显示。&quot; class=&quot;headerlink&quot; title=&quot;一个简单的方法，设置系统分辨率来完成全屏的显示。   &quot;&gt;&lt;/a&gt;一个简单的方法，设置系统分辨率来完成全屏的显示。   &lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1.程序开启自动设置Window系统分辨率,使程序全屏显示&lt;br&gt;2.程序退出时还原 Window系统分辨率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="MFC" scheme="http://yoursite.com/categories/MFC/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MFC" scheme="http://yoursite.com/tags/MFC/"/>
    
  </entry>
  
</feed>
